%This script loads 1) behavioral timestamps (generated by BehaviorTimestamps*.m), and 2) the CSV file containing spike times
% (generated by jrclust), and produces peri-event time histogram and spike raster plots. 

% Run this after TNC_S_OrienterCSVsessAnalysisEASwhisper.m

clear all; clear functions; clc

% S = load('export_for_psths');
% ts.reachStart = S.wheelStart;

%% Raw voltage traces from bin and meta files

% addpath(genpath('/Users/parkj/Documents/MATLAB'))
% addpath(genpath('/Users/parkj/Desktop/SpikeGLX-master 2/MATLAB-SDK')) % the folder with spikeGLX matlab scripts  
% addpath(genpath('/Users/parkj/Documents/MATLAB/TONIC-master'))        % TONIC-master folder
% addpath(genpath('/Users/parkj/Desktop/jrclust_user'));                % jrclust folder

%% Load files 

path = '/Users/stubblefielde/Desktop/mfiles/DudmanLab/data/spikes/recordings16_17/forWhisper';
cd(path)    
load('BehVariables_170428', 'ts')  % load behavioral timestamps (reach start, stop, and position/velocity data for each reach)
% load('BehVariables170427', 'ts', 'pos1', 'vel1', 'reach0')            % load behavioral timestamps (reach start, stop, and position/velocity data for each reach)
% load('BehVariables', 'ts', 'pos1', 'vel1', 'reach0') 
% load('BehVariables2', 'ts', 'pos1', 'vel1', 'reach0') 


% csvFileName = 'WR23_acc_dms_090117_g0_t0.nidq_hh2_2probes_park.csv';  % name of the csv file to be read
csvFileName = 'Vgateight_170428_g0_t0.imec.ap_imec3_opt3.csv';
% csvFileName = 'Vgateight_17_04_27_g0_t0.imec.ap_imec3_opt3.csv';

csvData     = csvread(csvFileName);                                     % read the csv file (1st col: spike timing, 2nd col: cluster id, 3rd col: max site)
spkClus     = unique(csvData(csvData(:,2)>0,2));                        % valid and unique clusters (positive cluster IDs)

%% Process spike times data and generate PSTH and Rasters

% get spike times from the csv file
spkTimes = struct; % the structure to contain spike times
for u = 1:length(spkClus) % for all valid clusters (units)
    clusId = ['c' num2str(spkClus(u))];     % cluster name string
    spkTimes(u).spkTimes = csvData(csvData(:,2)==spkClus(u),1).*1000;   % spike times bundled in a structure (in ms, i.e. jrclust data are in seconds)
    spkTimes(u).clusId   = spkClus(u);      % cluster ID
    spkTimes(u).maxSite  = mode(csvData(csvData(:,2)==spkClus(u),3));   % assign the current cluster to a site of the probe
    %spkTimesCell{1,u}    = csvData(csvData(:,2)==spkClus(u),1).*1000;  % spike times bundled in a cell(in ms)
end
clearvars u 

spkTimesCell    = struct2cell(spkTimes'); % the entire spike times converted into a cell 

% Modified for Vgateight_170428
% spkTimesCell = spkTimesCell(:,cell2mat(spkTimesCell(3,1:171)));        %First pass
% spkTimesCell = spkTimesCell(:,cell2mat(spkTimesCell(2,130:160)));      %SC
% spkTimesCell = spkTimesCell(:,cell2mat(spkTimesCell(2,1:24)));         %Snr
% spkTimesCell = spkTimesCell(:,cell2mat(spkTimesCell(2,107:130)));    %in between SNr & SC
spkTimesCell = spkTimesCell(:,cell2mat(spkTimesCell(2,50:80)));        %just for quick check

binSpkCount = psthBIN( spkTimesCell, ts.reachStart', 5, [1e3 1e3], -1 );          %get the binned spikecount with the binsize specified (e.g. 1 ms, 20 ms, 50 ms)
% binSpkCountSNr = psthBIN( spkTimesCellSNr, ts.reachStart', 1, [1e3 1e3], -1 );  %get the binned spikecount with the binsize specified (e.g. 1 ms, 20 ms, 50 ms)

rowcolSubplots = ceil(sqrt(length(spkTimesCell)));                       %# of rows/cols of subplots

%% draw psth
psthPlotFlag   = true;                                                   %boolean - to plot psth or not
figure;                                                     

%this works for plotting all units, Vgateight_170428:
% [psthReachStart, psthZscoreReachStart] = psthJP(spkTimesCell, ts.reachStart', 14, 14, psthPlotFlag);   % neural spike data, behavioral event vector, # row, # column of subplots

%this works for plotting all units, Vgateght_170427:
% [psthReachStart, psthZscoreReachStart] = psthJP(spkTimesCell, ts.reachStart', 13, 13, psthPlotFlag);   % neural spike data, behavioral event vector, # row, # column of subplots


%For only plotting psths in sections:
% [psthReachStartSC, psthZscoreReachStartSC] = psthJP(spkTimesCellSC, ts.reachStart', 6, 5, psthPlotFlag);   
[psthReachStart, psthZscoreReachStart] = psthJP(spkTimesCell, ts.reachStart', 5, 5, psthPlotFlag);   % neural spike data, behavioral event vector, # row, # column of subplots

% psthJP(spkTimesCellACC, ts.reachStop', 6, 8, psthPlotFlag);    % neural spike data, behavioral event vector, # row, # column of subplots
% psthJP(spkTimesCellACC, ts.reward', 6, 8, psthPlotFlag);       % neural spike data, behavioral event vector, # row, # column of subplots
% psthJP(spkTimesCellDMS, ts.reachStop', 6, 8, psthPlotFlag);    % neural spike data, behavioral event vector, # row, # column of subplots
% psthJP(spkTimesCellDMS, ts.reward', 6, 8, psthPlotFlag);       % neural spike data, behavioral event vector, # row, # column of subplots
% %psthJP(spkTimesCellACC, ts.lick', 7, 10, psthPlotFlag);     

% draw rasters
% figure;
% rasterJP(spkTimesCell, ts.reachStart', 6, 10);   % neural spike data, behavioral event vector, #row, # column of subplots
% Don't need the following for now EAS:
% rasterJP(spkTimesCell, ts.reward', 6, 10); 
% % neural spike data must be provided in a cell array each cell containing the unit's spiketime vector
% % behavioral timestamps must be provided as an event time vector(s)
% 
% % save('psthZscoreReachStartACC', 'psthZscoreReachStartACC')
% % save('psthZscoreReachStartDMS', 'psthZscoreReachStartDMS')
save('psthZscoreReachStart', 'psthZscoreReachStart')



%% Correlation between velocity and psth
% reachStartACCcorrMat = psthReachStartACC.image.indices;
% 
% 
% 
% 
% 
% psthStruct.image.aligned
% 
% 
% 
% 
% 
% 
% 
