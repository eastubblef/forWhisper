%This script loads 1) behavioral timestamps (generated by
% BehaviorTimestamps*.m), and 2) the CSV file containing spike times
% (generated by jrclust), and produces peri-event time histogram and 
% spike raster plot. 

clear all; clear functions; clc

%% Raw voltage traces from bin and meta files
% addpath(genpath('C:\Users\labadmin\Documents\MATLAB'))
% addpath(genpath('C:\Users\labadmin\Documents\MATLAB\SpikeGLX-master 2\MATLAB-SDK')) % the folder with spikeGLX matlab scripts  
% addpath(genpath('C:\Users\labadmin\Documents\MATLAB\TONIC-master'))                 % TONIC-master folder
% addpath(genpath('C:\Users\labadmin\Desktop\jrclust'));                              % jrclust folder

addpath(genpath('/Users/parkj/Documents/MATLAB'))
addpath(genpath('/Users/parkj/Desktop/SpikeGLX-master 2/MATLAB-SDK')) % the folder with spikeGLX matlab scripts  
addpath(genpath('/Users/parkj/Documents/MATLAB/TONIC-master'))        % TONIC-master folder
addpath(genpath('/Users/parkj/Desktop/jrclust_user'));                % jrclust folder

%% Load files 
path    =  '/Volumes/RAID2/parkj/NeuralData/WR23_acc_dms_090117';     % file directory
cd(path)    % change directory to the current data folder

load('BehVariables', 'ts', 'pos1', 'vel1', 'reach0') % load behavioral timestamps (reach start, stop, and position/velocity data for each reach)
csvFileName = 'WR23_acc_dms_090117_g0_t0.nidq_hh2_2probes_park.csv';  % name of the csv file to be read
csvData     = csvread(csvFileName);              % read the csv file (1st col: spike timing, 2nd col: cluster id, 3rd col: max site)
spkClus     = unique(csvData(csvData(:,2)>0,2)); % valid and unique clusters (positive cluster IDs)

%% Process spike times data and generate PSTH and Rasters
% get spike times from the csv file
spkTimes = struct; % the structure to contain spike times
for u = 1:length(spkClus) % for all valid clusters (units)
    clusId = ['c' num2str(spkClus(u))];     % cluster name string
    spkTimes(u).spkTimes = csvData(csvData(:,2)==spkClus(u),1).*1000; % spike times bundled in a structure (in ms, i.e. jrclust data are in seconds)
    spkTimes(u).clusId   = spkClus(u);      % cluster ID
    spkTimes(u).maxSite  = mode(csvData(csvData(:,2)==spkClus(u),3)); % assign the current cluster to a site of the probe
    %spkTimesCell{1,u}    = csvData(csvData(:,2)==spkClus(u),1).*1000; % spike times bundled in a cell(in ms)
end
clearvars u 

spkTimesCell    = struct2cell(spkTimes'); % the entire spike times converted into a cell 
spkTimesCellACC = spkTimesCell(:,cell2mat(spkTimesCell(3,:))<=64); % the ACC spike times cell (1st probe)
spkTimesCellDMS = spkTimesCell(:,cell2mat(spkTimesCell(3,:))>64);  % the DMS spike times cell (2nd probe)

binSpkCountACC = psthBIN( spkTimesCellACC, ts.reachStart', 1, [1e3 1e3], -1 );  % get the binned spikecount with the binsize specified (e.g. 1 ms, 20 ms, 50 ms)
binSpkCountDMS = psthBIN( spkTimesCellDMS, ts.reachStart', 1, [1e3 1e3], -1 );  % get the binned spikecount with the binsize specified (e.g. 1 ms, 20 ms, 50 ms)


% just to determine the number of rows and columns of the PSTH plot
rowcolSubplots = ceil(sqrt(length(spkTimesCell))); % # of rows of subplots 

%% draw psth
psthPlotFlag   = true; % boolean - to plot psth or not
%figure;
[psthReachStartACC, psthZscoreReachStartACC] = psthJP(spkTimesCellACC, ts.reachStart', 6, 8, psthPlotFlag);   % neural spike data, behavioral event vector, # row, # column of subplots
psthJP(spkTimesCellACC, ts.reachStop', 6, 8, psthPlotFlag);    % neural spike data, behavioral event vector, # row, # column of subplots
psthJP(spkTimesCellACC, ts.reward', 6, 8, psthPlotFlag);       % neural spike data, behavioral event vector, # row, # column of subplots
%psthJP(spkTimesCellACC, ts.lick', 7, 10, psthPlotFlag);         % neural spike data, behavioral event vector, # row, # column of subplots

[psthReachStartDMS, psthZscoreReachStartDMS] = psthJP(spkTimesCellDMS, ts.reachStart', 8, 9, psthPlotFlag);   % neural spike data, behavioral event vector, # row, # column of subplots
psthJP(spkTimesCellDMS, ts.reachStop', 6, 8, psthPlotFlag);    % neural spike data, behavioral event vector, # row, # column of subplots
psthJP(spkTimesCellDMS, ts.reward', 6, 8, psthPlotFlag);       % neural spike data, behavioral event vector, # row, # column of subplots
%psthJP(spkTimesCellACC, ts.lick', 7, 10, psthPlotFlag);     

% draw rasters
% figure;
rasterJP(spkTimesCell, ts.reachStart', 6, 10);   % neural spike data, behavioral event vector, #row, # column of subplots
rasterJP(spkTimesCell, ts.reward', 6, 10); 
% neural spike data must be provided in a cell array each cell containing the unit's spiketime vector
% behavioral timestamps must be provided as an event time vector(s)

save('psthZscoreReachStartACC', 'psthZscoreReachStartACC')
save('psthZscoreReachStartDMS', 'psthZscoreReachStartDMS')



%% Correlation between velocity and psth
reachStartACCcorrMat = psthReachStartACC.image.indices;





psthStruct.image.aligned







